{Syntax, Literal, Hole, Regex, Sequence, Program} = require 'Syntax'


describe 'constructing phrases', () ->
  beforeEach () ->
    # @categories =
    #   'DEFAULT': [ '`NE`' ]
    #   'NE': [
    #     '(num `N`)'
    #     '(arg `N`)'
    #     '(arith `A` `NE` `NE`)'
    #   ]
    #   'N': [
    #     '`REGEX [0-9]+`'
    #   ]
    #   'A': [
    #     '+'
    #     '-'
    #     '*'
    #     '/'
    #   ]

    @categories =
      'DEFAULT': [ Sequence [Hole 'NE', 'expr'] ]
      'NE': [
        Sequence [(Literal '(num '), (Hole 'N', 'number'), (Literal ')')]
        Sequence [(Literal '(arith '),
                  (Hole 'A', 'op'),
                  (Literal ' '),
                  (Hole 'NE', 'randl'),
                  (Literal ' '),
                  (Hole 'NE', 'randr'),
                  (Literal ')')]
      ]
      'N': [
        Sequence [Regex '[0-9]+']
      ]
      'A': [
        Sequence [Literal '+']
        Sequence [Literal '-']
        Sequence [Literal '*']
        Sequence [Literal '/']
      ]

    @syntax = new Syntax @categories
    @prog = new Program @syntax

  it 'starts with the default hole', () ->
    expect (@prog.symbolsForCategory @prog.nextUnfilledHole().category)
      .toBe @syntax.categories['DEFAULT']

  it 'accepts simple fills', () ->
    @prog.fillHole ['expr'], (Sequence [(Literal '(num '), (Hole 'N'), (Literal ')')])

    expect @prog.nextUnfilledHole().category
      .toBe 'N'
    expect @prog.programSequence
      .toEqual (Sequence [(Literal '(num '), (Hole 'N'), (Literal ')')])

  it 'accepts multiple simple fills', () ->
    @prog.fillHole 0, (Sequence [(Literal '(arith '),
                              (Hole 'A'),
                              (Literal ' '),
                              (Hole 'NE'),
                              (Literal ' '),
                              (Hole 'NE'),
                              (Literal ')')])
    @prog.fillHole 1, (Sequence [(Literal '+')])
    @prog.fillHole 2, (Sequence [(Literal '(num '), (Hole 'N'), (Literal ')')])
    @prog.fillHole 3, (Sequence [(Literal '8')])

    expect @prog.nextUnfilledHole().category
      .toBe 'NE'
    expect @prog.programSequence
      .toEqual (Sequence [(Literal '(arith + (num 8) '),
                          (Hole 'NE'),
                          (Literal ')')])

  it 'does not accept invalid fills', () ->
    expect () => @prog.fillHole 0, (Sequence [(Literal 'invalid')])
      .toThrow()

  it 'does not accept valid fills of the wrong category', () ->
    expect () => @prog.fillHole 0, (Sequence [Literal '+'])
      .toThrow()

  it 'allows simple path navigation', () ->
    expect @prog.programSequence.navigate ['expr']
      .toEqual (Hole 'DEFAULT')

  it 'allows deep path navigation', () ->
    @prog.fillHole ['expr'], (Sequence [(Literal '(arith ')
                                        (Hole 'A')
                                        (Literal ' ')
                                        (Hole 'NE')
                                        (Literal ' ')
                                        (Hole 'NE')
                                        (Literal ')')])
    expect @prog.programSequence.navigate ['expr', 'op']
      .toEqual (Hole 'A')
    expect @prog.programSequence.navigate ['expr', 'randl']
      .toEqual (Hole 'NE')